Extension ideas:
    LLM connection - induce language model to describe the plan in natural language (e.g. narrate a delivery robot path through an office)
        Consider methods for identifying the subplot segments i.e. how to know when a subplot ends? Idea: two randomization parameters, k and m. k determines likelihood of veering off into a subplot. m determines average length of subplot so subplot length is known prior to planning. When in subplot mode, operations are greedily and randomly for subplot-length steps and search resumes normally from the resulting state.
        
            This raises a new design question of how to allow for this without removing heuristic from search (because an astar search will always prefer the optimal branch over any branch with subplots). One option is the following process: generate optimal plan, randomly choose a subplot start point in optimal path, generate subplot as above, regenerate plan with new starting state as the final state in the subplot, repeat.

            Once subplots are identified and the final (suboptimal) plan is generated, induce LLM (possibly in a separate generation) to provide more creative explanations for the deviation (e.g. the robot got lost, its battery was low and needed an emergency charge, etc.)

    Need to further consider Jesse's suggestion of other ways to induce subplots a la Riedl and Bulitko. More specifically, what can be optimized for in place of plan length to generate more interesting stories. (really need to make time to reread the 3 narrative planning papers from Riedl, Bulitko, and Young)


    split up plan into consecutive similarly named operations (group all move-X-Y together), use flipped interaction to have ChatGPT narrativize a single group of operations at the same time and ask for the next actions when finished. Grouping is mainly necessary to avoid needing a new generation every time the agent moves a single cell. This approach has the further benefit that it would be even easier to group after switching to predicate logic (group by consecutive calls to the same operation regardless of variables)
        Can approximate similar-named by assuming that all operations are named opname-a-b-c-... where a, b, c, ... are all variables (i.e. the expected result of a naive, but direct translation from predicate to propositional), grouping by operations that start with opname


    Starting prompt to work off of:
        You are a professional {genre} writer. I am a computer scientist. We are collaborating on an experimental writing technique. I will provide you with lists of operations that result from a classical planner built on propositional logic, each separated by a *. For example, move-11-21 is an operation that moves an agent from cell (1,1) to cell (2,1) in a grid. You will respond with a fictional story about {subject} where main character takes actions that match the plan operations. For example, "move-11-21 * move-21-31 * move-31-41 * move-41-42" should give a story where the main character is traveling. Here is your plan: {plan}
        
        genre: historical fiction
        subject: Abraham Lincoln
        plan: move_11_21 * move_21_31 * move_31_32 * move_32_22 * move_22_21 * move_21_11 * pickup-11 * move_11_12 * move_12_13 * move_13_14 * drop_14 * move_14_15