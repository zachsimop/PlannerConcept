import planner
import openai
import os
import requests
import ast

#TODO: Update to use openAI api instead of requests

def build_prompt(plan):
    '''
        placeholder function. After deciding on a prompt template that effectively generates
        narrativization consistent with an input plan, this function should take a plan as
        generated by planner.Planner.make_plan_astar and inject it into the prompt template
    '''
    prompt = f'{plan}'
    return prompt
    openai.ChatCompletion()

def query_chatGPT(message, api_key=''):
    api_key = os.getenv('OPENAI_API_KEY')
    url = 'https://api.openai.com/v1/chat/completions'
    payload = '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "' + f'{message}' +  '"}], "temperature": 0.7}'
    headers = {"Content-Type" : "application/json",
              "Authorization" : f"Bearer {api_key}"}

    response = requests.request("POST", url, headers=headers, data=payload)

    resp_code = response.status_code
    if resp_code == 200:
        resp_dict = ast.literal_eval(response.text)

        in_token_len = resp_dict['usage']['prompt_tokens']
        out_token_len = resp_dict['usage']['completion_tokens']

        output_role = resp_dict['choices'][0]['message']['role']
        output_message = resp_dict['choices'][0]['message']['content']
        finish_reason = resp_dict['choices'][0]['finish_reason']

        return in_token_len, out_token_len, output_role, output_message, finish_reason
    else:
        print('Error Code:', resp_code)

if __name__ == '__main__':
    api_key = os.getenv('OPENAI_API_KEY')
    message = 'In the style of William Shakespeare, write a sonnet about the A* search algorithm'
    print(query_chatGPT(build_prompt(message), api_key))

'''
Oh A* search, thou art a wondrous thing,
A method born of logic, wit, and skill,
Thou navigat'st through mazes with a ring,
And find'st the shortest path with steadfast will.

Thou weigh'st each node and edge with care and grace,
And hearken'st to the heuristic's call,
Thou tread'st the graph with such a steady pace,
And lead'st us to the destination's hall.

Thou art the shining star of algorithms,
The guide that leads us through the darkest night,
Thou art the tool that helps us solve enigmas,
And bring'st solutions clearly into sight.

Oh A* search, thy brilliance doth astound,
Thou art the jewel that we have found.
'''